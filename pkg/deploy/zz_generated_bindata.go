// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/coredns.yaml
// manifests/rolebindings.yaml
// manifests/traefik.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _corednsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4b\x6f\x1b\x37\x10\xbe\xeb\x57\x10\x0a\x72\x29\xba\xb2\xd5\x20\xa9\xcb\x5b\x62\xab\x89\x81\x58\x11\xfc\xc8\xa5\x28\x82\x11\x77\x24\xb1\xe6\x72\x58\x72\x56\xb6\x9a\xfa\xbf\x17\xdc\x97\x97\xf2\x3a\x71\xd2\xec\x89\xe4\x70\x1e\x9c\xc7\x37\xb3\xe0\xf4\x47\xf4\x41\x93\x95\x62\x3b\x1d\x5d\x6b\x9b\x4b\x71\x81\x7e\xab\x15\xbe\x56\x8a\x4a\xcb\xa3\x02\x19\x72\x60\x90\x23\x21\x2c\x14\x28\x85\x22\x8f\xb9\x0d\xcd\x3e\x38\x50\x28\xc5\x75\xb9\xc4\x2c\xec\x02\x63\x31\xca\xb2\x6c\xd4\x17\xed\x97\xa0\x26\x50\xf2\x86\xbc\xfe\x07\x58\x93\x9d\x5c\x1f\x85\x89\xa6\x83\xed\x74\x89\x0c\xad\xe6\x63\x53\x06\x46\x7f\x4e\x06\x13\xb5\x06\x96\x68\x42\x5c\x89\x4a\x8f\xb7\xc8\x58\xf1\x2f\x89\x38\xb0\x07\xe7\xb4\x5d\xd7\x8a\xb2\x1c\x57\x50\x1a\x0e\x9d\xbd\xb5\x55\xb2\x35\xdb\x97\x06\x83\x1c\x65\x02\x9c\x7e\xeb\xa9\x74\x95\xe4\x4c\x8c\xc7\x23\x21\x3c\x06\x2a\xbd\xc2\xe6\x0c\x6d\xee\x48\xdb\x4a\x58\x26\x42\xed\x99\x7a\xe3\x28\xaf\x17\x9d\x13\xe2\x76\x8b\x7e\xd9\xf0\x1a\x1d\xb8\x5a\xdc\x00\xab\xcd\xd3\xf4\x59\xca\xf7\xc5\xac\x91\x7f\x84\x43\xdf\x68\x9b\x6b\xbb\x4e\xfc\x0a\xd6\x12\x57\xec\x8d\x73\x87\xe4\x26\xfe\x86\x92\xa9\x74\x39\x30\x4a\x31\x66\x5f\xe2\xf8\xc7\x87\x87\x0c\x9e\xe3\xaa\xb2\xaf\x71\xd8\x17\x1e\x3c\x12\xe2\x61\xee\x3c\x22\x39\x94\xcb\xbf\x50\x71\x15\xfb\xc1\x54\xff\xee\x04\xef\x6a\xe7\x98\xec\x4a\xaf\xcf\xc0\x7d\x4f\xd9\xb4\xd7\x8f\xc9\xe3\x4a\x1b\x94\xe2\xdf\xca\xa7\x13\xf9\xf2\x85\xf8\x5c\x2d\xe3\x87\xde\x93\x0f\xdd\x76\x83\x60\x78\xd3\x6d\x75\xe1\xc8\xb3\x38\x40\x56\x07\x8d\xc6\xac\x0c\xe8\x0f\x26\x93\x28\xff\xe0\xa7\x7b\x46\x0a\x1c\x92\x8b\x07\x73\xca\xf1\x5d\x75\x7c\xaf\x2e\xe6\xa8\x21\xc8\xc5\x34\xf4\xce\x56\x60\x0c\x6f\x3c\x95\xeb\x7b\xd5\x77\xdd\xea\x3e\x0b\xc4\xf3\xcf\xc7\xef\xaf\x2e\x2e\x67\xe7\x9f\x4e\x3e\x9c\xbd\x3e\x9d\xdf\x3d\x17\xda\x66\x90\xe7\x7e\x02\xde\x81\xd0\xee\x55\xbd\xe8\x6b\x8c\xb5\x25\xb4\x0d\xa8\x4a\x8f\xbd\xf3\xd2\x05\xf6\x08\xc5\xb0\x21\xc3\x82\x07\xcc\x73\x9e\x0a\xe4\x0d\x96\x41\xc8\xdf\xa6\x2f\x5f\x74\x84\x15\xf9\x1b\xf0\xb9\x98\xd4\x6e\x89\xc5\x69\xb6\x13\x45\x76\xd5\x5d\x51\xa0\x36\x28\x5e\x1c\x76\x07\x86\xc8\x8d\x52\x57\xf5\x68\x90\x2f\xc1\x80\x55\xf5\x2b\xee\xfe\x57\xe6\x54\x71\xfc\x7a\xfa\xcc\x0a\xc7\xbb\xd9\x2d\x14\xee\x3e\x85\x9e\x89\xcb\x8d\x0e\x42\x07\x01\x56\x60\x4d\x13\x18\x2f\xb6\xc2\x85\xaa\x0c\x28\xc0\x09\xb4\xec\x77\x82\x49\x04\x6d\xd0\x2a\x14\x37\xe0\xad\xb6\xeb\xf0\xc0\x7a\xbc\x65\xb4\x71\x19\xf6\x80\xe7\x04\x9d\xa1\x5d\x81\xdf\xd7\x3f\xf6\x20\xe5\x28\x64\xe0\x5c\x73\xa5\x66\xdc\x07\x9a\x5a\xf0\x38\x56\xce\xc9\xfc\x62\x3c\x0a\x0e\x55\xe4\x7e\xe6\xd1\x19\xad\x20\x48\x31\x1d\x09\x11\xb1\x88\x71\xbd\xab\x05\xf3\xce\xa1\x14\xe7\x64\x8c\xb6\xeb\xab\x0a\xd5\x6a\x14\xec\x9f\xc8\x26\x98\x05\xdc\x5e\x59\xd8\x82\x36\xb0\x8c\x7e\xad\xc4\xa1\x41\xc5\xe4\xeb\x3b\x45\x84\xf9\xf7\x3d\xc3\x87\x4d\x67\x2c\x9c\xe9\x04\xf7\xbd\x53\x65\x4c\xc2\xff\xd8\xe3\xdb\xe7\x55\xeb\x04\xc3\xe6\x7b\x1e\xae\xde\x49\x06\x7d\x1f\xe6\xe3\x97\x89\x6b\xdc\x45\x97\x79\xcd\x5a\x81\x79\x9d\xe7\x64\xc3\x07\x6b\x76\xe3\x5e\x75\x91\x8b\x9c\xe4\xa5\x18\xcf\x6e\x75\xe0\xd0\x12\x63\xa3\xba\x48\x9e\x1f\xbf\x98\x02\x7b\x1d\x83\x82\x14\x46\xdb\xf2\xb6\xb9\xa4\xc8\x32\x68\x8b\xbe\xb3\x25\x7b\x90\x16\xf5\xa7\x0b\x58\xdf\x1f\xb7\x18\x25\xa7\x93\x57\x93\x5f\xd2\x4b\x8b\xd2\x98\x05\x19\xad\x76\x52\x9c\xae\xe6\xc4\x0b\x8f\x01\x2b\x40\x6f\xcb\xb2\xd7\x65\xbb\xe2\xd4\x85\xe6\xe4\x24\x86\xa3\x20\xbf\x93\x62\xfa\xeb\xe1\x99\x4e\x20\xf0\xef\x12\xc3\xfe\x6d\xe5\x4a\x29\xa6\x87\x87\xc5\xa0\x8c\x44\x04\xf8\x75\x90\xe2\x0f\x31\xce\x62\x9d\x8d\x7f\x16\xe3\x04\x78\x5b\xc8\x1f\x8b\x3f\x3b\x96\x2d\x99\xb2\xc0\xb3\x18\xd5\x24\x6e\xad\xb7\x62\xb9\x66\xf5\xa5\x9e\xfe\x22\xde\x5f\x00\x6f\x64\x02\xed\xc9\x5b\x20\x8f\x71\x96\x22\x36\xf0\x2f\x0b\x6e\x21\xe7\x2b\xd2\xf7\xaf\x3d\xa2\x22\x76\xa6\xe4\x29\x5d\x32\x2c\xc8\xb3\x14\x3d\x24\x6e\xb1\x22\x35\xdd\x79\x62\x52\x64\xa4\xb8\x3a\x59\x7c\xab\x9c\x8c\x95\x1b\x94\x75\x79\xfc\x05\x59\x49\x7f\x68\xa5\x15\xc8\x5e\xab\x61\xcb\xfa\xd2\xaa\x06\xa6\x79\x77\x4c\x96\xf1\x96\xfb\xd9\x03\xc6\xd0\xcd\xc2\xeb\xad\x36\xb8\xc6\x59\x50\x60\xaa\x12\x95\xb1\xa3\x85\x7e\x44\x15\x38\x58\x6a\xa3\x59\xe3\x5e\xfe\x41\x9e\xa7\x07\x99\x98\xcf\x2e\x3f\xbd\x39\x9d\x9f\x7c\xba\x98\x9d\x7f\x3c\x3d\x9e\x25\xe4\xdc\x93\xdb\x67\x00\x63\x06\x02\x77\x4e\xc4\xbf\x6b\x83\xcd\x04\x95\x86\xd1\xe8\x2d\x5a\x0c\x61\xe1\x69\x89\x7d\x79\x1b\x66\xf7\x16\x39\x55\xe1\xea\x6c\xd9\x1b\x53\x44\x93\x0e\x52\x1c\x1d\x1e\x1d\x26\xc7\x41\x6d\x30\x3a\xf9\xdd\xe5\xe5\xa2\x47\xd0\x56\xb3\x06\x73\x82\x06\x76\x17\xa8\xc8\xe6\x41\x8a\x57\x7d\x56\xd6\x05\x52\xc9\x1d\xf1\x65\x8f\x16\x4a\xa5\x30\x84\xcb\x8d\xc7\xb0\x21\x93\xd7\x00\xde\x7e\x2b\xd0\xa6\xf4\xd8\xa3\xb6\xbc\xb9\x0d\x2d\xb2\x9c\xd4\x83\x6b\x43\xa8\xeb\xe3\x1b\x0a\x53\xb5\x0d\x3e\x75\xcf\x30\xf6\x55\x0f\x66\x2c\xc2\x7e\xb8\x2a\xd0\x6e\xd1\x22\xa1\xb5\x9e\x1e\x24\x36\x8c\xdd\x7c\x37\xc8\xf9\x90\xfa\x24\x4c\x78\xca\xc3\x6a\x9e\x47\x87\x9f\x66\x0e\x1f\x98\x15\x7a\x6d\xef\xd1\x61\xe1\xc1\x6f\xcc\xfd\x7c\x17\x3b\x50\x9d\x66\xe3\x58\xc8\xe3\x01\x72\x50\x1e\xdc\xa3\xbf\x33\x4f\x98\x3d\x54\xfd\xe7\x91\x35\x8d\xb8\x27\xe9\xa9\x53\x4a\x3a\x47\x0c\xe9\x6c\x74\x9c\x2e\x64\x7f\xa0\x9e\x5f\xdc\x3d\x1f\xf5\x60\x35\xdb\x03\x4d\xd7\x47\xc3\x7d\xec\xcc\x06\x90\xf1\x11\x86\x1a\xd2\xb2\x01\xf0\x73\x29\x46\xa6\x2c\xff\x05\x00\x00\xff\xff\x62\x07\x41\x0f\x5e\x10\x00\x00")

func corednsYamlBytes() ([]byte, error) {
	return bindataRead(
		_corednsYaml,
		"coredns.yaml",
	)
}

func corednsYaml() (*asset, error) {
	bytes, err := corednsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rolebindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xbd\x0a\xc2\x40\x10\x04\xe0\xfe\x9e\xe2\x5e\xe0\x22\x76\x72\xa5\x16\xf6\x01\xed\x37\xb9\x55\xd7\xdc\x1f\xbb\x7b\x01\x7d\x7a\x09\x48\x1a\x51\xb0\x1c\x18\xe6\x63\xa0\xd2\x19\x59\xa8\x64\x6f\x79\x80\xb1\x83\xa6\xb7\xc2\xf4\x04\xa5\x92\xbb\x69\x27\x1d\x95\xcd\xbc\x35\x13\xe5\xe0\xed\x21\x36\x51\xe4\xbe\x44\xdc\x53\x0e\x94\xaf\x26\xa1\x42\x00\x05\x6f\xac\xcd\x90\xd0\xdb\xa9\x0d\xe8\xa0\x92\x20\xcf\xc8\x6e\x89\x11\xd5\x41\x48\x94\x0d\x97\x88\x3d\x5e\x96\x36\x54\x3a\x72\x69\xf5\x87\x6c\xac\xfd\x80\x57\x47\x1e\xa2\x98\xfc\xba\x5f\xe9\x6d\x48\x1b\xee\x38\xaa\x78\xe3\xfe\x42\x4e\x82\xfc\xe5\x85\x79\x05\x00\x00\xff\xff\x54\xf2\x55\xe2\x29\x01\x00\x00")

func rolebindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_rolebindingsYaml,
		"rolebindings.yaml",
	)
}

func rolebindingsYaml() (*asset, error) {
	bytes, err := rolebindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rolebindings.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _traefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcd\x6a\xc3\x30\x10\x84\xef\x7e\x8a\x25\x90\x63\x64\x72\x69\x41\xb7\xfe\x18\x5a\x0a\x25\x34\x6d\xaf\x65\x2d\x4f\x62\x11\x49\x16\xda\x55\xa0\x2d\x7d\xf7\xe2\xe0\x63\x8e\xbb\xf3\xf1\x31\xc3\xd9\x7f\xa2\x88\x9f\x92\xa5\x11\x21\x1a\xc7\xaa\x01\xc6\x4f\xed\x79\xdb\x9c\x7c\x1a\x2c\x3d\x21\xc4\x87\x91\x8b\x36\x11\xca\x03\x2b\xdb\x86\x28\x71\x84\x25\x2d\x8c\x83\x3f\x2d\xb7\x64\x76\xb0\x74\xaa\x3d\x36\xf2\x2d\x8a\xd8\x48\x86\x9b\x71\x37\x0b\x2c\x8d\xaa\x59\x6c\xdb\xae\x7f\x5f\x3e\xee\xbb\xb7\xd7\xee\xbd\xdb\x7f\xdd\xed\x9e\xff\xd6\xad\x28\xab\x77\xed\x05\x94\x76\x11\x6f\xb6\xe6\xf6\xc6\x6c\x8d\x1e\x7f\x1a\x22\x81\xce\x2e\xa2\xd2\xb3\x33\x48\xdc\x07\x0c\x96\x56\x5a\x2a\x56\x97\x40\x24\x5c\xfd\x47\x68\xf1\x4e\x4c\x2e\x53\x84\x8e\xa8\x72\x15\x9b\x9b\x97\x04\x85\x18\x9f\x8e\x05\x22\x5d\x1a\xf2\xe4\x93\x9a\x2a\x78\xc4\x81\x6b\xd0\x5d\xed\x83\x97\x11\xc3\x1e\xe5\xec\xe7\xc1\x8b\xe1\x3f\x00\x00\xff\xff\x90\x2a\x9c\x28\x4d\x01\x00\x00")

func traefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_traefikYaml,
		"traefik.yaml",
	)
}

func traefikYaml() (*asset, error) {
	bytes, err := traefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"coredns.yaml":      corednsYaml,
	"rolebindings.yaml": rolebindingsYaml,
	"traefik.yaml":      traefikYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"coredns.yaml":      &bintree{corednsYaml, map[string]*bintree{}},
	"rolebindings.yaml": &bintree{rolebindingsYaml, map[string]*bintree{}},
	"traefik.yaml":      &bintree{traefikYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
